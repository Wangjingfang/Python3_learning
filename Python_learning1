##condition = 1
##while condition < 10:
##    print(condition)
##    condition = condition + 1
##
##while True:
##    print("i'm turn")
##
##example_list = [1,2,3,4,5,6,7,8,234,23,54,12,54]
##for i in example_list:
##    print(i)
##    print('inner of for')
##print ('outer of for')
##
##for: window : CONTROL + [ :整体向左移动Tab距离
##for: mac : command + {
##
##
###range(1,3)  : [1,2]
##for i in range(1,10):  # range 电脑自动生成的迭代器, range的第三位是step size 步长
##    print(i)
##
##for i in range(1,10,2):  # step size = 2, 1 ,3, 5, 7, 9
##    print(i)
##
##
##x = 4
##y = 2
##z = 3
##if x>y:
##    print('x is greater than y')
##else:
##    print('x is less or equal to y')
##
##
##x = -2
##y = 2
##z = 3
##if x>y:
##    print('x is greater than y')
##elif x<-1:
##    print('...')
##elif x<1:
##    print('--1')
##else:
##    print('x is less or equal to y')
##
##"""
##...
##
##只要第一次满足条件就跳出条件语句
##"""
##
## def 函数
##def function():
##    print('this is a function')
##    a = 1 + 2
##    print(a)
##function()
##a = 1
##b = 2
##c = a+b
##
##print(c)
##
## 函数加参量
##def fun(a, b):
##    c = a*b
##    print('the c is', c)
##fun(2, 5)
##fun(a=2, b=5)
##
## 函数的默认值
##def sale_car(price, color, brand='carmy',is_second_hand=True,):
##    print('price', price,
##          'colour:',color,
##          'brand', brand,
##          'is_second_hand:',is_second_hand,)
##
##sale_car(1000,'red')
## 在函数定义中没有赋值的默认参数放前面，定义好的值放后面
##
##
##13 全局& 局部变量
##def fun():
##    a = 10
##    print(a)
##    return a+100  # 可以把return 当成输出值
##fun()
##
##print(fun())
##X = 100  # global var define usually Big chatter
##a = None
##def fun():
##    global a
##    a = 20
##    return a+100
##print(X)
##print('a past=',a)
##print(fun())
##print('a now=',a)
### 如果函数内不定义a 为全局变量，那么就不能在局外输出a,并且需要运行函数。
##
##
## 14 外部模块安装
##
## 15 文件读写1
##text = "This is my first test\nThis is next line\nthis is last line"
###print(text)
##
##my_file = open('my file.txt','w')  # 以写的形式打开
##my_file.write(text)
##my_file.close()
##
## 16  文件读写2
##append_text = "\nthis is appended file"
##my_file = open('my file.txt','a')  # a 是附加的方式
##my_file.write(append_text)
##my_file.close()
##
## 17 文件读写3
##file = open('my file.txt', 'r')   # r = read  # 把文件存到file中
##content = file.read()   # 把my file文件的内容读取到 content中
##print(content)
##"""
##This is my first test
##This is next line
##this is last line
##this is appended file
##this is appended file
##"""
##file = open('my file.txt', 'r')
##first_read = file.readline()  # 逐行读取
##second_read = file.readline()
##print('first_read:',first_read, second_read)
##'''
##This is my first test
## This is next line
##逐行读取
## '''
##file = open('my file.txt', 'r')
##content = file.readlines()  # 全部读取，把每行的字符放入Python_list中
##print(content)
##
##"""
##['This is my first test\n', 'This is next line\n', 'this is last line\n', 'this is appended file\n', 'this is appended file']
##全部读取，把每行的字符放入Python_list中
##"""
##python_list = [1,2,3,4,5,,]
##second_read_time = file.readline
##file.readlines
##
##
## 18 class
##class Calculator:
##    name = 'Good calculator'
##    price = 18
##    def add(self,x, y):  # self  自己的属性
##        print(self.name)
##        result = x + y
##        print(result)
##    def minus(self, x, y):
##        result = x - y
##        print(result)
##    def times(self, x, y):
##        print(x*y)
##calcul = Calculator()
##calcul.name
##calcul.add(1,4)
##
## 19 类 init  初始
##class Calculator:
##    name = 'Good calculator'
##    price = 18
##    def __init__(self,name,price,hight,width,weight):
##        self.name=name
##        self.price=price
##        self.h=hight
##        self.wi=width
##        self.we=weight
##    def add(self,x, y):  # self  自己的属性
##        print(self.name)
##        result = x + y
##        print(result)
##    def minus(self, x, y):
##        result = x - y
##        print(result)
##    def times(self, x, y):
##        print(x*y)
##"""
##使用 __init__时，对个体直接赋予初始值
##>>> c = Calculator('bad calculator',200,3,12,32)
##>>> c.name
##'bad calculator'
##>>> c.we
##32
##>>> c.add(5,7)
##bad calculator
##12
##"""
##

